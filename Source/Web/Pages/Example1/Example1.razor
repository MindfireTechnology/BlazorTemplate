@page "/example1"
@using WebApi.Models
@inject ClientSettings ClientSettings
@inject IStateManager State
@inject IMediator Eventor
@inject ISnackbar Snackbar

<h1>Example</h1>

<MudText>@BoundText</MudText>

@if(CurrentUser != null)
{
	<MudForm>
		<MudCard Class="col-4">
			<MudCardContent>
				<MudTextField @bind-Value="CurrentUser.UserName" Label="Username"></MudTextField>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ButtonClicked" Class="mt-3">Get</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ResetClicked" Class="mt-3">Reset</MudButton>
			</MudCardContent>
		</MudCard>
		<UserAddress @bind-Addresses="CurrentUser.Addresses" />
	</MudForm>
}

@code
{
	public User? CurrentUser { get; set; }
	public int Count { get; set; }
	public string? BoundText { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		CurrentUser = await State.GetState<User>();

		State.OnCommitted<User>(this, (sender, user) =>
		{
			CurrentUser = user;
			StateHasChanged();
			return Task.CompletedTask;
		});

		Eventor.Subscribe(this, "Click", (object sender, string? value) =>
		{
			BoundText = value;
			StateHasChanged();
			return Task.CompletedTask;
		});

		Eventor.Subscribe<string>(this, "AddressUpdate", (sender, value) =>
		{
			Snackbar.Add(value, Severity.Info);
			return Task.CompletedTask;
		});

		await base.OnParametersSetAsync();
	}

	protected async Task ButtonClicked()
	{
		CurrentUser = await ClientSettings.ApiUrl
		.AppendPathSegments("api", "user", "get", CurrentUser?.UserName)
		.GetAsync()
		.ReceiveJson<User>();

		await State.CommitState<User>(CurrentUser);
		await Eventor.Publish<User>(this, CurrentUser);

		Snackbar.Add("Get Successful", Severity.Info);
	}

	protected async Task ResetClicked()
	{
		CurrentUser = new User();
		await State.CommitState<User>(CurrentUser);
		await Eventor.Publish<User>(this, CurrentUser);

		Snackbar.Add("Reset Successful", Severity.Info);
	}
}

